# nginx/nginx.conf

# This events block is required by Nginx, but we can use the default settings for our simple case.
events {
    worker_connections 1024; # Max connections per worker process
}

# This http block contains all our web server configuration.
http {
    # Define an "upstream" block for our Flask application. This makes the configuration cleaner.
    # We can refer to this block by the name 'flask_app_server'.
    upstream flask_app_server {
        # This is the key part for Docker Compose networking.
        # 'reservation_app' is the name of our Flask service defined in docker-compose.yml.
        # Docker's internal DNS will resolve this name to the Flask container's internal IP address.
        # 5000 is the port the Flask app is running on *inside* its container.
        server reservation_app:5000;
    }

    # Define the main server that will listen for incoming requests.
    server {
        # Listen on port 80, the standard port for HTTP traffic.
        listen 80;

        # This will match requests for any hostname. For local development, this is fine.
        # In production, you would specify your domain name, e.g., server_name reservations.example.com;
        server_name _;

        # All requests to the root location (/) will be handled by this block.
        location / {
            # These headers are important to pass information from the proxy to the Flask app,
            # such as the original host, the client's IP address, and the protocol (http/https).
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # This is where the magic happens. Nginx passes the request on to our
            # upstream Flask application server defined above.
            proxy_pass http://flask_app_server;
        }

        # It's good practice to have a specific location block for static files
        # to improve performance, although for this simple setup, letting Flask handle them is fine.
        # In a production setup, you might have a block like this:
        # location /static/ {
        #     alias /path/to/your/app/static/;
        #     expires 30d;
        # }
    }
}
