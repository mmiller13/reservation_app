# docker-compose.yml
# Use version 3.8 of the Docker Compose file format.
version: '3.8'

# Define all the services (containers) that make up our application.
services:
  # The first service is our Flask reservation application.
  reservation_app:
    build:
      # Use the Dockerfile in the current directory (.) to build the image.
      context: .
      dockerfile: Dockerfile
    container_name: reservation_app_container
    # The 'restart: unless-stopped' policy ensures the container restarts automatically
    # if it crashes, unless it was explicitly stopped.
    restart: unless-stopped
    # We no longer need to expose ports to the host machine here, as Nginx
    # will be the only point of contact. Nginx will talk to this container
    # over the internal Docker network.
    # ports:
    #   - "5001:5000"
    volumes:
      # Mount the persistent_data directory for the SQLite database.
      - ./persistent_data:/app/db_volume
    environment:
      # Pass the database URL environment variable to the container.
      - DATABASE_URL=sqlite:////app/db_volume/reservations.db
      - RUNNING_IN_DOCKER=true
    # This service depends on the db_init service to complete successfully first.
    # Note: 'depends_on' only waits for start, not for a command to finish.
    # A more robust healthcheck is needed for production, but this is fine for dev.
    depends_on:
      - db_init

  # The second service is Nginx, which will act as our reverse proxy.
  nginx_proxy:
    # Use the official stable nginx image from Docker Hub.
    image: nginx:stable-alpine
    container_name: nginx_proxy_container
    restart: unless-stopped
    ports:
      # Map port 80 on the host machine to port 80 in the container.
      # This is the standard HTTP port, so you won't need to type a port number in your browser.
      - "80:80"
      # You could also add a mapping for HTTPS port 443 here in the future.
      # - "443:443"
    volumes:
      # Mount our custom nginx.conf file from the host into the container,
      # overwriting the default Nginx configuration.
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    # This container should start after the reservation_app is running.
    depends_on:
      - reservation_app

  # A one-off service to initialize the database.
  # This container starts, runs its command, and then exits.
  db_init:
    build:
      context: .
      dockerfile: Dockerfile
    # This service has no 'restart' policy because it's meant to run only once.
    volumes:
      - ./persistent_data:/app/db_volume
    environment:
      - DATABASE_URL=sqlite:////app/db_volume/reservations.db
    # The command this container will run.
    command: ["flask", "init-db"]

# Docker Compose will automatically create a default network for these services
# so they can communicate with each other using their service names (e.g., 'reservation_app').
